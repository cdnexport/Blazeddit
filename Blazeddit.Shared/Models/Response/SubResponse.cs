using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace Blazeddit.Shared
{
    //This beautiful file was generated by: https://app.quicktype.io/#l=cs&r=json2csharp
    public partial class SubResponse
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("data")]
        public SubResponseData Data { get; set; }
    }

    public partial class SubResponseData
    {
        [JsonProperty("modhash")]
        public string Modhash { get; set; }

        [JsonProperty("dist")]
        public long Dist { get; set; }

        [JsonProperty("children")]
        public Child[] Children { get; set; }

        [JsonProperty("after")]
        public string After { get; set; }

        [JsonProperty("before")]
        public object Before { get; set; }
    }

    public partial class Child
    {
        [JsonProperty("kind")]
        public Kind Kind { get; set; }

        [JsonProperty("data")]
        public ChildData Data { get; set; }
    }

    public partial class ChildData
    {
        [JsonProperty("approved_at_utc")]
        public object ApprovedAtUtc { get; set; }

        [JsonProperty("subreddit")]
        public string Subreddit { get; set; }

        [JsonProperty("selftext")]
        public string Selftext { get; set; }

        [JsonProperty("author_fullname")]
        public string AuthorFullname { get; set; }

        [JsonProperty("saved")]
        public bool Saved { get; set; }

        [JsonProperty("mod_reason_title")]
        public object ModReasonTitle { get; set; }

        [JsonProperty("gilded")]
        public long Gilded { get; set; }

        [JsonProperty("clicked")]
        public bool Clicked { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("link_flair_richtext")]
        public FlairRichtext[] LinkFlairRichtext { get; set; }

        [JsonProperty("subreddit_name_prefixed")]
        public string SubredditNamePrefixed { get; set; }

        [JsonProperty("hidden")]
        public bool Hidden { get; set; }

        [JsonProperty("pwls")]
        public long? Pwls { get; set; }

        [JsonProperty("link_flair_css_class")]
        public string LinkFlairCssClass { get; set; }

        [JsonProperty("downs")]
        public long Downs { get; set; }

        [JsonProperty("thumbnail_height")]
        public long? ThumbnailHeight { get; set; }

        [JsonProperty("hide_score")]
        public bool HideScore { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("quarantine")]
        public bool Quarantine { get; set; }

        [JsonProperty("link_flair_text_color")]
        public FlairTextColor LinkFlairTextColor { get; set; }

        [JsonProperty("author_flair_background_color")]
        public string AuthorFlairBackgroundColor { get; set; }

        [JsonProperty("subreddit_type")]
        public SubredditType SubredditType { get; set; }

        [JsonProperty("ups")]
        public long Ups { get; set; }

        [JsonProperty("total_awards_received")]
        public long TotalAwardsReceived { get; set; }

        [JsonProperty("media_embed")]
        public MediaEmbed MediaEmbed { get; set; }

        [JsonProperty("thumbnail_width")]
        public long? ThumbnailWidth { get; set; }

        [JsonProperty("author_flair_template_id")]
        public Guid? AuthorFlairTemplateId { get; set; }

        [JsonProperty("is_original_content")]
        public bool IsOriginalContent { get; set; }

        [JsonProperty("user_reports")]
        public object[] UserReports { get; set; }

        [JsonProperty("secure_media")]
        public Media SecureMedia { get; set; }

        [JsonProperty("is_reddit_media_domain")]
        public bool IsRedditMediaDomain { get; set; }

        [JsonProperty("is_meta")]
        public bool IsMeta { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("secure_media_embed")]
        public MediaEmbed SecureMediaEmbed { get; set; }

        [JsonProperty("link_flair_text")]
        public string LinkFlairText { get; set; }

        [JsonProperty("can_mod_post")]
        public bool CanModPost { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }

        [JsonProperty("approved_by")]
        public object ApprovedBy { get; set; }

        [JsonProperty("thumbnail")]
        public string Thumbnail { get; set; }

        [JsonProperty("edited")]
        public bool Edited { get; set; }

        [JsonProperty("author_flair_css_class")]
        public string AuthorFlairCssClass { get; set; }

        [JsonProperty("author_flair_richtext")]
        public FlairRichtext[] AuthorFlairRichtext { get; set; }

        [JsonProperty("gildings")]
        public Gildings Gildings { get; set; }

        [JsonProperty("post_hint", NullValueHandling = NullValueHandling.Ignore)]
        public PostHint? PostHint { get; set; }

        [JsonProperty("content_categories")]
        public string[] ContentCategories { get; set; }

        [JsonProperty("is_self")]
        public bool IsSelf { get; set; }

        [JsonProperty("mod_note")]
        public object ModNote { get; set; }

        [JsonProperty("created")]
        public long Created { get; set; }

        [JsonProperty("link_flair_type")]
        public FlairType LinkFlairType { get; set; }

        [JsonProperty("wls")]
        public long? Wls { get; set; }

        [JsonProperty("banned_by")]
        public object BannedBy { get; set; }

        [JsonProperty("author_flair_type")]
        public FlairType AuthorFlairType { get; set; }

        [JsonProperty("domain")]
        public string Domain { get; set; }

        [JsonProperty("selftext_html")]
        public object SelftextHtml { get; set; }

        [JsonProperty("likes")]
        public object Likes { get; set; }

        [JsonProperty("suggested_sort")]
        public string SuggestedSort { get; set; }

        [JsonProperty("banned_at_utc")]
        public object BannedAtUtc { get; set; }

        [JsonProperty("view_count")]
        public object ViewCount { get; set; }

        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("no_follow")]
        public bool NoFollow { get; set; }

        [JsonProperty("is_crosspostable")]
        public bool IsCrosspostable { get; set; }

        [JsonProperty("pinned")]
        public bool Pinned { get; set; }

        [JsonProperty("over_18")]
        public bool Over18 { get; set; }

        [JsonProperty("preview", NullValueHandling = NullValueHandling.Ignore)]
        public Preview Preview { get; set; }

        [JsonProperty("all_awardings")]
        public AllAwarding[] AllAwardings { get; set; }

        [JsonProperty("media_only")]
        public bool MediaOnly { get; set; }

        [JsonProperty("can_gild")]
        public bool CanGild { get; set; }

        [JsonProperty("spoiler")]
        public bool Spoiler { get; set; }

        [JsonProperty("locked")]
        public bool Locked { get; set; }

        [JsonProperty("author_flair_text")]
        public string AuthorFlairText { get; set; }

        [JsonProperty("visited")]
        public bool Visited { get; set; }

        [JsonProperty("num_reports")]
        public object NumReports { get; set; }

        [JsonProperty("distinguished")]
        public object Distinguished { get; set; }

        [JsonProperty("subreddit_id")]
        public string SubredditId { get; set; }

        [JsonProperty("mod_reason_by")]
        public object ModReasonBy { get; set; }

        [JsonProperty("removal_reason")]
        public object RemovalReason { get; set; }

        [JsonProperty("link_flair_background_color")]
        public LinkFlairBackgroundColor LinkFlairBackgroundColor { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("is_robot_indexable")]
        public bool IsRobotIndexable { get; set; }

        [JsonProperty("report_reasons")]
        public object ReportReasons { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("num_crossposts")]
        public long NumCrossposts { get; set; }

        [JsonProperty("num_comments")]
        public long NumComments { get; set; }

        [JsonProperty("send_replies")]
        public bool SendReplies { get; set; }

        [JsonProperty("whitelist_status")]
        public WhitelistStatus WhitelistStatus { get; set; }

        [JsonProperty("contest_mode")]
        public bool ContestMode { get; set; }

        [JsonProperty("mod_reports")]
        public object[] ModReports { get; set; }

        [JsonProperty("author_patreon_flair")]
        public bool AuthorPatreonFlair { get; set; }

        [JsonProperty("author_flair_text_color")]
        public FlairTextColor? AuthorFlairTextColor { get; set; }

        [JsonProperty("permalink")]
        public string Permalink { get; set; }

        [JsonProperty("parent_whitelist_status")]
        public WhitelistStatus ParentWhitelistStatus { get; set; }

        [JsonProperty("stickied")]
        public bool Stickied { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("subreddit_subscribers")]
        public long SubredditSubscribers { get; set; }

        [JsonProperty("created_utc")]
        public long CreatedUtc { get; set; }

        [JsonProperty("media")]
        public Media Media { get; set; }

        [JsonProperty("is_video")]
        public bool IsVideo { get; set; }

        [JsonProperty("link_flair_template_id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? LinkFlairTemplateId { get; set; }
    }

    public partial class AllAwarding
    {
        [JsonProperty("is_enabled")]
        public bool IsEnabled { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("subreddit_id")]
        public string SubredditId { get; set; }

        [JsonProperty("description")]
        public Description? Description { get; set; }

        [JsonProperty("coin_reward")]
        public long CoinReward { get; set; }

        [JsonProperty("icon_width")]
        public long IconWidth { get; set; }

        [JsonProperty("icon_url")]
        public Uri IconUrl { get; set; }

        [JsonProperty("days_of_premium")]
        public long DaysOfPremium { get; set; }

        [JsonProperty("icon_height")]
        public long IconHeight { get; set; }

        [JsonProperty("resized_icons")]
        public ResizedIcon[] ResizedIcons { get; set; }

        [JsonProperty("days_of_drip_extension")]
        public long DaysOfDripExtension { get; set; }

        [JsonProperty("award_type")]
        public AwardType AwardType { get; set; }

        [JsonProperty("coin_price")]
        public long CoinPrice { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ResizedIcon
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public partial class FlairRichtext
    {
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public string A { get; set; }

        [JsonProperty("e")]
        public string E { get; set; }

        [JsonProperty("u", NullValueHandling = NullValueHandling.Ignore)]
        public Uri U { get; set; }

        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public string T { get; set; }
    }

    public partial class Gildings
    {
        [JsonProperty("gid_1", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid1 { get; set; }

        [JsonProperty("gid_2", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid2 { get; set; }

        [JsonProperty("gid_3", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid3 { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("reddit_video")]
        public RedditVideo RedditVideo { get; set; }
    }

    public partial class RedditVideo
    {
        [JsonProperty("fallback_url")]
        public Uri FallbackUrl { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("scrubber_media_url")]
        public Uri ScrubberMediaUrl { get; set; }

        [JsonProperty("dash_url")]
        public Uri DashUrl { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("hls_url")]
        public Uri HlsUrl { get; set; }

        [JsonProperty("is_gif")]
        public bool IsGif { get; set; }

        [JsonProperty("transcoding_status")]
        public TranscodingStatus TranscodingStatus { get; set; }
    }

    public partial class MediaEmbed
    {
    }

    public partial class Preview
    {
        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("reddit_video_preview", NullValueHandling = NullValueHandling.Ignore)]
        public RedditVideo RedditVideoPreview { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("source")]
        public ResizedIcon Source { get; set; }

        [JsonProperty("resolutions")]
        public ResizedIcon[] Resolutions { get; set; }

        [JsonProperty("variants")]
        public Variants Variants { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Variants
    {
        [JsonProperty("gif", NullValueHandling = NullValueHandling.Ignore)]
        public Gif Gif { get; set; }

        [JsonProperty("mp4", NullValueHandling = NullValueHandling.Ignore)]
        public Gif Mp4 { get; set; }
    }

    public partial class Gif
    {
        [JsonProperty("source")]
        public ResizedIcon Source { get; set; }

        [JsonProperty("resolutions")]
        public ResizedIcon[] Resolutions { get; set; }
    }

    public enum AwardType { Community, Global };

    public enum Description { GoldAward, PlatinumAward, SilverAward };

    public enum FlairTextColor { Dark, Light };

    public enum FlairType { Richtext, Text };

    public enum LinkFlairBackgroundColor { Empty, Ff4500, The9E8D49 };

    public enum TranscodingStatus { Completed };

    public enum WhitelistStatus { AllAds, Nsfw, NoAds };

    public enum PostHint { HostedVideo, Image, Link, RichVideo, Self };

    public enum SubredditType { Public, Restricted };

    public enum Kind { T3 };

    public partial class SubResponse
    {
        public static SubResponse FromJson(string json) => JsonConvert.DeserializeObject<SubResponse>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SubResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
        {
            AwardTypeConverter.Singleton,
            DescriptionConverter.Singleton,
            FlairTextColorConverter.Singleton,
            FlairTypeConverter.Singleton,
            LinkFlairBackgroundColorConverter.Singleton,
            TranscodingStatusConverter.Singleton,
            WhitelistStatusConverter.Singleton,
            PostHintConverter.Singleton,
            SubredditTypeConverter.Singleton,
            KindConverter.Singleton,
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
        };
    }

    internal class AwardTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AwardType) || t == typeof(AwardType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "community":
                    return AwardType.Community;
                case "global":
                    return AwardType.Global;
            }
            throw new Exception("Cannot unmarshal type AwardType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AwardType)untypedValue;
            switch (value)
            {
                case AwardType.Community:
                    serializer.Serialize(writer, "community");
                    return;
                case AwardType.Global:
                    serializer.Serialize(writer, "global");
                    return;
            }
            throw new Exception("Cannot marshal type AwardType");
        }

        public static readonly AwardTypeConverter Singleton = new AwardTypeConverter();
    }

    internal class DescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Gold Award":
                    return Description.GoldAward;
                case "Platinum Award":
                    return Description.PlatinumAward;
                case "Silver Award":
                    return Description.SilverAward;
            }
            throw new Exception("Cannot unmarshal type Description");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Description)untypedValue;
            switch (value)
            {
                case Description.GoldAward:
                    serializer.Serialize(writer, "Gold Award");
                    return;
                case Description.PlatinumAward:
                    serializer.Serialize(writer, "Platinum Award");
                    return;
                case Description.SilverAward:
                    serializer.Serialize(writer, "Silver Award");
                    return;
            }
            throw new Exception("Cannot marshal type Description");
        }

        public static readonly DescriptionConverter Singleton = new DescriptionConverter();
    }

    internal class FlairTextColorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FlairTextColor) || t == typeof(FlairTextColor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "dark":
                    return FlairTextColor.Dark;
                case "light":
                    return FlairTextColor.Light;
            }
            throw new Exception("Cannot unmarshal type FlairTextColor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FlairTextColor)untypedValue;
            switch (value)
            {
                case FlairTextColor.Dark:
                    serializer.Serialize(writer, "dark");
                    return;
                case FlairTextColor.Light:
                    serializer.Serialize(writer, "light");
                    return;
            }
            throw new Exception("Cannot marshal type FlairTextColor");
        }

        public static readonly FlairTextColorConverter Singleton = new FlairTextColorConverter();
    }

    internal class FlairTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FlairType) || t == typeof(FlairType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "richtext":
                    return FlairType.Richtext;
                case "text":
                    return FlairType.Text;
            }
            throw new Exception("Cannot unmarshal type FlairType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FlairType)untypedValue;
            switch (value)
            {
                case FlairType.Richtext:
                    serializer.Serialize(writer, "richtext");
                    return;
                case FlairType.Text:
                    serializer.Serialize(writer, "text");
                    return;
            }
            throw new Exception("Cannot marshal type FlairType");
        }

        public static readonly FlairTypeConverter Singleton = new FlairTypeConverter();
    }

    internal class LinkFlairBackgroundColorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LinkFlairBackgroundColor) || t == typeof(LinkFlairBackgroundColor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return LinkFlairBackgroundColor.Empty;
                case "#9e8d49":
                    return LinkFlairBackgroundColor.The9E8D49;
                case "#ff4500":
                    return LinkFlairBackgroundColor.Ff4500;
                default:
                    return LinkFlairBackgroundColor.Empty;
            }
            throw new Exception("Cannot unmarshal type LinkFlairBackgroundColor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LinkFlairBackgroundColor)untypedValue;
            switch (value)
            {
                case LinkFlairBackgroundColor.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case LinkFlairBackgroundColor.The9E8D49:
                    serializer.Serialize(writer, "#9e8d49");
                    return;
                case LinkFlairBackgroundColor.Ff4500:
                    serializer.Serialize(writer, "#ff4500");
                    return;
            }
            throw new Exception("Cannot marshal type LinkFlairBackgroundColor");
        }

        public static readonly LinkFlairBackgroundColorConverter Singleton = new LinkFlairBackgroundColorConverter();
    }

    internal class TranscodingStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TranscodingStatus) || t == typeof(TranscodingStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "completed")
            {
                return TranscodingStatus.Completed;
            }
            throw new Exception("Cannot unmarshal type TranscodingStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TranscodingStatus)untypedValue;
            if (value == TranscodingStatus.Completed)
            {
                serializer.Serialize(writer, "completed");
                return;
            }
            throw new Exception("Cannot marshal type TranscodingStatus");
        }

        public static readonly TranscodingStatusConverter Singleton = new TranscodingStatusConverter();
    }

    internal class WhitelistStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WhitelistStatus) || t == typeof(WhitelistStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "all_ads")
            {
                return WhitelistStatus.AllAds;
            }
            if (value == "promo_adult_nsfw")
            {
                return WhitelistStatus.Nsfw;
            }
            if (value == "no_ads")
            {
                return WhitelistStatus.NoAds;
            }
            else
            {
                return WhitelistStatus.NoAds;
            }
            throw new Exception("Cannot unmarshal type WhitelistStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WhitelistStatus)untypedValue;
            if (value == WhitelistStatus.AllAds)
            {
                serializer.Serialize(writer, "all_ads");
                return;
            }
            if (value == WhitelistStatus.Nsfw)
            {
                serializer.Serialize(writer, "promo_adult_nsfw");
                return;
            }
            if (value == WhitelistStatus.NoAds)
            {
                serializer.Serialize(writer, "no_ads");
                return;
            }
            throw new Exception("Cannot marshal type WhitelistStatus");
        }

        public static readonly WhitelistStatusConverter Singleton = new WhitelistStatusConverter();
    }

    internal class PostHintConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PostHint) || t == typeof(PostHint?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "hosted:video":
                    return PostHint.HostedVideo;
                case "image":
                    return PostHint.Image;
                case "link":
                    return PostHint.Link;
                case "rich:video":
                    return PostHint.RichVideo;
                case "self":
                    return PostHint.Self;
            }
            throw new Exception("Cannot unmarshal type PostHint");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PostHint)untypedValue;
            switch (value)
            {
                case PostHint.HostedVideo:
                    serializer.Serialize(writer, "hosted:video");
                    return;
                case PostHint.Image:
                    serializer.Serialize(writer, "image");
                    return;
                case PostHint.Link:
                    serializer.Serialize(writer, "link");
                    return;
                case PostHint.RichVideo:
                    serializer.Serialize(writer, "rich:video");
                    return;
                case PostHint.Self:
                    serializer.Serialize(writer, "self");
                    return;
            }
            throw new Exception("Cannot marshal type PostHint");
        }

        public static readonly PostHintConverter Singleton = new PostHintConverter();
    }

    internal class SubredditTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubredditType) || t == typeof(SubredditType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "public")
            {
                return SubredditType.Public;
            }
            if (value == "restricted")
            {
                return SubredditType.Restricted;
            }
            throw new Exception("Cannot unmarshal type SubredditType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubredditType)untypedValue;
            if (value == SubredditType.Public)
            {
                serializer.Serialize(writer, "public");
                return;
            }
            if (value == SubredditType.Restricted)
            {
                serializer.Serialize(writer, "restricted");
                return;
            }
            throw new Exception("Cannot marshal type SubredditType");
        }

        public static readonly SubredditTypeConverter Singleton = new SubredditTypeConverter();
    }

    internal class KindConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kind) || t == typeof(Kind?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "t3")
            {
                return Kind.T3;
            }
            throw new Exception("Cannot unmarshal type Kind");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kind)untypedValue;
            if (value == Kind.T3)
            {
                serializer.Serialize(writer, "t3");
                return;
            }
            throw new Exception("Cannot marshal type Kind");
        }

        public static readonly KindConverter Singleton = new KindConverter();
    }
}
